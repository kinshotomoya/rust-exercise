use std::io;
use rand::Rng;
use std::cmp::Ordering;

fn main() {
    println!("Êï∞ÂΩì„Å¶„Å¶„Åø„Å¶ÔºÅ");

    let secret_number: u32 = rand::thread_rng().gen_range(1, 101);

    loop {
        let mut guess = String::new();

        // &„ÅßÂèÇÁÖß„ÇíË°®„Åó„Å¶„ÅÑ„Çã
        // ‰∏äË®ò„Åß‰ΩúÊàê„Åó„Åüguess„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆ„É°„É¢„É™„Çí‰Ωø„ÅÑÂõû„Åô„Åì„Å®„Åß„ÄÅÊØéÂõûÊñ∞Ë¶è„Åß„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê„Åô„ÇãÂøÖË¶Å„Åå„Å™„Åè„Å™„Çã
        io::stdin().read_line(&mut guess).expect("fail to read ");

        // rust„Åß„ÅØ„ÄÅÂêå„ÅòÂ§âÊï∞Âêç„ÅßÊñ∞„Åó„ÅèÂ§âÊï∞„Çí‰ΩúÊàê„Åß„Åç„ÇãÔºà„Ç∑„É£„Éâ„Éº„Ç¶„Ç£„É≥„Ç∞„Å®„ÅÑ„ÅÜÔºâ
        let guess: u32 = match guess.trim().parse() {
            Ok(num) => num,
            Err(_) => {
                println!("„Å°„ÇÉ„Çì„Å®Êï∞ÂÄ§„ÇíÂÖ•Âäõ„Åó„ÇçÔºÅÔºÅÔºÅÔºÅüí¢");
                continue;
            }
        };

        println!("„ÅÇ„Å™„Åü„ÅØ„Åå‰∫àÊÉ≥„Åó„Åü„ÅÆ„ÅØ„ÄÅ{}", guess);

        match guess.cmp(&secret_number) {
            // Ordering„ÅØEnum„Å´„Å™„Å£„Å¶„ÅÑ„Å¶„ÄÅ„Çµ„Éñ„Å®„Åó„Å¶‰ª•‰∏ã‰∏â„Å§Â≠òÂú®„Åô„Çã
            Ordering::Less => println!("Â∞è„Åï„ÅÑ„Å≠ÔºÅ"),
            Ordering::Greater => println!("Â§ß„Åç„ÅÑ„Å≠ÔºÅ"),
            Ordering::Equal => {
                println!("Ê≠£Ëß£ÔºÅÔºÅ");
                break;
            },
        };
    }

}
